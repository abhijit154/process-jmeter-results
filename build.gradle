apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'groovy'

archivesBaseName = 'process-jmeter-results'

sourceCompatibility = '1.6'

repositories {
    mavenCentral()
    maven {url 'http://dist.codehaus.org/mule/dependencies/maven2'}
    maven {url 'http://repository.codehaus.org'}
    maven {url 'https://maven-repository.dev.java.net/nonav/repository'}
    maven {
        url mavenCentral().url
        artifactUrls 'http://repository.jboss.org/nexus/content/groups/public-jboss'
    }
}

sourceSets {
    main {
        resources {
            srcDir projectDir
            include 'conf/**'
        }
    }
}

dependencies {
    compile "org.slf4j:slf4j-simple:${slf4j_version}"
    compile "org.codehaus.groovy:groovy-all:${groovy_version}"
	compile "org.apache.commons:commons-math:${commons_math_version}"
	compile "log4j:log4j:${log4j_version}"
	compile "oracle:ojdbc14:10.2.0.2"
}

jar {
    from "conf/*"
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }

    manifest {
        attributes 'Specification-Version': project.version
        attributes 'Created-By': 'Stephen Copp(TM) 2008'
        attributes 'Main-Class': 'com.copp.jmeter.ProcessJmeterResults'
    }
}

ant {
    property(file:"${projectDir}/conf/environment.properties")
    property(file:"${projectDir}/conf/test.properties")
}


String timestamp = new Date().format('yyyyMMdd.HHmmss')
File javaHome = file("${System.getenv('JAVA_HOME')}")
File antHome = file("${System.getenv('ANT_HOME')}")
File jmeterHome = file("${System.getenv('JMETER_HOME')}")
File jmeterResults = file("${projectDir}/test.results")
File jmeterArchive = file("${projectDir}/jmeter.archive")

File srcDir = file("${projectDir}/src")
File binDir = file("${projectDir}/bin")
File libDir = file("${projectDir}/lib")
File confDir = file("${projectDir}/conf")
File scriptsDir = file("${projectDir}/scripts")
File testsDir = file("${projectDir}/tests")
File utilsDir = file("${projectDir}/utils")
String lnpHost = "test01.stephencopp.com"

String environment = "${System.getProperty('environment', "test")}"
if (environment.isEmpty())
    throw new GradleException("ERROR: You need to pass in -Denvironment= parameter.")

println ""
println "       Timestamp: ${timestamp}"
println "  Gradle version: ${GradleVersion.current().version}"
println "    Java version: ${org.gradle.internal.jvm.Jvm.current()}"
println "       JAVA_HOME: ${javaHome}"
println "        ANT_HOME: ${antHome}"
println "     JMETER_HOME: ${jmeterHome}"
println "  Jmeter Results: ${jmeterResults}"
println "  Jmeter Archive: ${jmeterArchive}"
println "         Scripts: ${scriptsDir}"
println ""

task definePerfVariables {
    String testType = "perf"
    String jmeterHeap = "-Xmx2048m"
    String constantWait = "1500"
    String numThreads = "75"
    String throughput = "0"
    String rampTime = "300"
    String duration = "3600"
    String loop = "-1"
    String inputPath = "${testsDir}/input/"

    String server = ant."${environment}.server"
    String port = ant."${environment}.port"
    String dbServer = ant."${environment}.db.server"
    String dbUser = ant."${environment}.db.user"
    String dbPassword = ant."${environment}.db.password"
    String dbId = ant."${environment}.db.id"
    String dbSnapshotUrl  = ant."${environment}.db.snapshot.url"
    String fitnessePage  = ant."${environment}.fitnesse.page"

    println "     Environment: ${environment}" 
    println "       Test Type: ${testType}" 
    println "     JMeter Heap: ${jmeterHeap}" 
    println " -Dconstant.wait: ${constantWait}" 
    println "   -Dnum.threads: ${numThreads}" 
    println "    -Dthroughput: ${throughput} --- Keep this at zero" 
    println "     -Dramp.time: ${rampTime}" 
    println "      -Dduration: ${duration}" 
    println "          -Dloop: ${loop}" 
    println "     Test Server: ${server}"
    println "       Test Port: ${port}" 
    println "       DB server: ${dbServer}" 
    println "         DB User: ${dbUser}" 
    println "         DB Pass: ${dbPassword}" 
    println "           DB Id: ${dbId}"
    println " DB Snapshot URL: ${dbSnapshotUrl}"
    println "   Fitnesse Page: ${fitnessePage}" 
    println "      Input Path: ${inputPath}"
    println ""
}




























//*************************************************************************
//
// IntelliJ IDEA configuration
//
//*************************************************************************

idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
        def codeStyleNode = provider.node.component.find { it.@name == 'ProjectCodeStyleSettingsManager' }
        if (codeStyleNode == null) {
            codeStyleNode = provider.node.appendNode('component', [name: 'ProjectCodeStyleSettingsManager'])
        }
        codeStyleNode.replaceNode { node ->
            component(name: 'ProjectCodeStyleSettingsManager') {
                option(name: "PER_PROJECT_SETTINGS") {
                    value {
                        option(name: "OTHER_INDENT_OPTIONS") {
                            value {
                                option(name: "INDENT_SIZE", value: "4")
                                option(name: "CONTINUATION_INDENT_SIZE", value: "4")
                                option(name: "TAB_SIZE", value: "4")
                                option(name: "USE_TAB_CHARACTER", value: "false")
                                option(name: "SMART_TABS", value: "false")
                                option(name: "LABEL_INDENT_SIZE", value: "0")
                                option(name: "LABEL_INDENT_ABSOLUTE", value: "false")
                                option(name: "USE_RELATIVE_INDENTS", value: "false")
                            }
                        }
                        option(name: "CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                        option(name: "NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                        XML {
                            option(name: "XML_LEGACY_SETTINGS_IMPORTED", value: "true")
                        }

                        // this is needed in addition to the one below, for import settings
                        GroovyCodeStyleSettings {
                            option(name: "CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                            option(name: "NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                        }

                        // oddly, both "JAVA" and "Java" are used...
                        ['Groovy', 'JAVA', 'Java', 'Scala'].each {
                            codeStyleSettings(language: it) {
                                option(name: "CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                                option(name: "NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                                option(name: "BLANK_LINES_AROUND_METHOD", value: "2")
                                //option(name: "BLANK_LINES_BEFORE_METHOD_BODY", value: "1")
                                option(name: "ELSE_ON_NEW_LINE", value: "true")
                                option(name: "CATCH_ON_NEW_LINE", value: "true")
                                option(name: "FINALLY_ON_NEW_LINE", value: "true")
                                option(name: "SPACE_AFTER_TYPE_CAST", value: "false")
                                option(name: "INDENT_SIZE", value: "2")
                                option(name: "TAB_SIZE", value: "4")

                                // both this level and 'indentOptions' are used
                                option(name: "CONTINUATION_INDENT_SIZE", value: "4")
                                indentOptions {
                                    option(name: "CONTINUATION_INDENT_SIZE", value: "4")
                                }
                            }
                        }
                    }
                }
                option(name: "USE_PER_PROJECT_SETTINGS", value: "true")
            }
        }
    }
}
