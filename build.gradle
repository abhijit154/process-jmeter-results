apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jmeter'

archivesBaseName = 'process-jmeter-results'

sourceCompatibility = '1.6'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.github.kulya:jmeter-gradle-plugin:${jmeter_gradle_version}"
    }
}

repositories {
    mavenCentral()
    maven {url 'http://dist.codehaus.org/mule/dependencies/maven2'}
    maven {url 'http://repository.codehaus.org'}
    maven {url 'https://maven-repository.dev.java.net/nonav/repository'}
    maven {url 'http://repo.kulya.info/content/groups/public'}
    maven {
        url mavenCentral().url
        artifactUrls 'http://repository.jboss.org/nexus/content/groups/public-jboss'
    }
}

sourceSets {
    main {
        resources {
            srcDir projectDir
            include 'conf/**'
        }
    }
}

dependencies {
    compile "org.slf4j:slf4j-simple:${slf4j_version}"
    compile "org.codehaus.groovy:groovy-all:${groovy_version}"
    compile "org.apache.commons:commons-math:${commons_math_version}"
    compile "log4j:log4j:${log4j_version}"
    compile "oracle:ojdbc14:${ojdbc14_version}"
}

jar {
    from "conf/*"
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }

    manifest {
        attributes 'Specification-Version': project.version
        attributes 'Created-By': 'Stephen Copp(TM) 2008'
        attributes 'Main-Class': 'com.copp.jmeter.ProcessJmeterResults'
    }
}

ant {
    property(file:"${projectDir}/conf/environment.properties")
    property(file:"${projectDir}/conf/test.properties")
}

//init parameters
String timestamp = new Date().format('yyyyMMdd-HHmmss')
File javaHome = file("${System.getenv('JAVA_HOME')}")
File antHome = file("${System.getenv('ANT_HOME')}")
File jmeterHome = file("${System.getenv('JMETER_HOME')}")
File testResults = file("${projectDir}/test-results")
File testsDir = file("${projectDir}/tests")
File confDir = file("${projectDir}/conf")
String lnpHost = "test01.stephencopp.com"
String env = "${System.getProperty('env', "")}"
if (env.isEmpty())
    throw new GradleException("ERROR: You need to pass in -Denv= parameter.")

//test parameters
String testType = "${System.getProperty('testType', 'perf')}"
String jmeterHeap = "${System.getProperty('jmeterHeap', '-Xmx2048m')}"
String constantWait = "${System.getProperty('constantWait', '1500')}"
String numThreads = "${System.getProperty('numThreads', '75')}"
String throughput = "${System.getProperty('throughput', '0')}"
String rampTime = "${System.getProperty('rampTime', '300')}"
String duration = "${System.getProperty('duration', '3600')}"
String loop = "${System.getProperty('loop', '-1')}"

//environment parameters
String server = "${System.getProperty('server',ant."${env}.server")}"
String port = "${System.getProperty('port',ant."${env}.port")}"
String dbServer = "${System.getProperty('dbServer',ant."${env}.db.server")}"
String dbUser = "${System.getProperty('dbUser',ant."${env}.db.user")}"
String dbPassword = "${System.getProperty('dbPassword',ant."${env}.db.password")}"
String dbId = "${System.getProperty('dbId',ant."${env}.db.id")}"
String dbSnapshotUrl = "${System.getProperty('dbSnapshotUrl',ant."${env}.db.snapshot.url")}"

String testResultLog = "${testResults}/${env}-${testType}-${numThreads}users-${timestamp}.jtl"

println "-----------------"
println "       Timestamp: ${timestamp}"
println "  Gradle version: ${GradleVersion.current().version}"
println "    Java version: ${org.gradle.internal.jvm.Jvm.current()}"
println "       JAVA_HOME: ${javaHome}"
println "        ANT_HOME: ${antHome}"
println "     JMETER_HOME: ${jmeterHome}"
println "        Test Dir: ${testsDir}"
println "    Test Results: ${testResults}"
println "-----------------"
println "     Environment: ${env}"
println "       Test Type: ${testType}"
println "     JMeter Heap: ${jmeterHeap}"
println " -Dconstant.wait: ${constantWait}"
println "   -Dnum.threads: ${numThreads}"
println "    -Dthroughput: ${throughput} --- Keep this at zero"
println "     -Dramp.time: ${rampTime}"
println "      -Dduration: ${duration}"
println "          -Dloop: ${loop}"
println "     Test Server: ${server}"
println "       Test Port: ${port}"
println "       DB server: ${dbServer}"
println "         DB User: ${dbUser}"
println "         DB Pass: ${dbPassword}"
println "           DB Id: ${dbId}"
println " DB Snapshot URL: ${dbSnapshotUrl}"
println "Test Results Log: ${testResultLog}"
println "-----------------"

task JMeter << {
    ant.taskdef( name:"jmeter",classname: "org.programmerplanet.ant.taskdefs.jmeter.JMeterTask") {
        classpath { fileset(dir: "${jmeterHome}/lib", includes: 'ant-jmeter-1.1.1.jar')
        }
    }

    ant.jmeter(jmeterhome:"/opt/jmeter",
        resultlog:"${testResultLog}") {
        testplans(includes:"*.jmx", dir:"${testsDir}")

        jvmarg(value:"${jmeterHeap}")
        property(name:"server", value:"${server}")
        property(name:"port", value:"${port}")
        property(name:"db-server", value:"${dbServer}")
        property(name:"db-user", value:"${dbUser}")
        property(name:"db-pass", value:"${dbPassword}")
        property(name:"duration", value:"${duration}")
        property(name:"num-threads", value:"${numThreads}")
        property(name:"constant-wait", value:"${constantWait}")
        property(name:"throughput", value:"${throughput}")
        property(name:"ramp-time", value:"${rampTime}")
        property(name:"loop", value:"${loop}")
    }
}

//*************************************************************************
//
// IntelliJ IDEA configuration
//
//*************************************************************************

idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
        def codeStyleNode = provider.node.component.find { it.@name == 'ProjectCodeStyleSettingsManager' }
        if (codeStyleNode == null) {
            codeStyleNode = provider.node.appendNode('component', [name: 'ProjectCodeStyleSettingsManager'])
        }
        codeStyleNode.replaceNode { node ->
            component(name: 'ProjectCodeStyleSettingsManager') {
                option(name: "PER_PROJECT_SETTINGS") {
                    value {
                        option(name: "OTHER_INDENT_OPTIONS") {
                            value {
                                option(name: "INDENT_SIZE", value: "4")
                                option(name: "CONTINUATION_INDENT_SIZE", value: "4")
                                option(name: "TAB_SIZE", value: "4")
                                option(name: "USE_TAB_CHARACTER", value: "false")
                                option(name: "SMART_TABS", value: "false")
                                option(name: "LABEL_INDENT_SIZE", value: "0")
                                option(name: "LABEL_INDENT_ABSOLUTE", value: "false")
                                option(name: "USE_RELATIVE_INDENTS", value: "false")
                            }
                        }
                        option(name: "CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                        option(name: "NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                        XML {
                            option(name: "XML_LEGACY_SETTINGS_IMPORTED", value: "true")
                        }

                        // this is needed in addition to the one below, for import settings
                        GroovyCodeStyleSettings {
                            option(name: "CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                            option(name: "NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                        }

                        // oddly, both "JAVA" and "Java" are used...
                        ['Groovy', 'JAVA', 'Java', 'Scala'].each {
                            codeStyleSettings(language: it) {
                                option(name: "CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                                option(name: "NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND", value: "9999")
                                option(name: "BLANK_LINES_AROUND_METHOD", value: "2")
                                //option(name: "BLANK_LINES_BEFORE_METHOD_BODY", value: "1")
                                option(name: "ELSE_ON_NEW_LINE", value: "true")
                                option(name: "CATCH_ON_NEW_LINE", value: "true")
                                option(name: "FINALLY_ON_NEW_LINE", value: "true")
                                option(name: "SPACE_AFTER_TYPE_CAST", value: "false")
                                option(name: "INDENT_SIZE", value: "2")
                                option(name: "TAB_SIZE", value: "4")

                                // both this level and 'indentOptions' are used
                                option(name: "CONTINUATION_INDENT_SIZE", value: "4")
                                indentOptions {
                                    option(name: "CONTINUATION_INDENT_SIZE", value: "4")
                                }
                            }
                        }
                    }
                }
                option(name: "USE_PER_PROJECT_SETTINGS", value: "true")
            }
        }
    }
}
